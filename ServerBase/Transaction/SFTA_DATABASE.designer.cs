#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18033
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServerBase.Transaction
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CASREE_SFTA_DATABASE")]
	public partial class SFTA_DATABASEDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertSFTANodeRelation(SFTANodeRelation instance);
    partial void UpdateSFTANodeRelation(SFTANodeRelation instance);
    partial void DeleteSFTANodeRelation(SFTANodeRelation instance);
    partial void InsertSFTATreeInfo(SFTATreeInfo instance);
    partial void UpdateSFTATreeInfo(SFTATreeInfo instance);
    partial void DeleteSFTATreeInfo(SFTATreeInfo instance);
    #endregion
		
		public SFTA_DATABASEDataContext() : 
				base(global::ServerBase.Properties.Settings.Default.CASREE_SFTA_DATABASEConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public SFTA_DATABASEDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SFTA_DATABASEDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SFTA_DATABASEDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SFTA_DATABASEDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SFTANodeRelation> SFTANodeRelation
		{
			get
			{
				return this.GetTable<SFTANodeRelation>();
			}
		}
		
		public System.Data.Linq.Table<SFTATreeInfo> SFTATreeInfo
		{
			get
			{
				return this.GetTable<SFTATreeInfo>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SFTANodeRelation")]
	public partial class SFTANodeRelation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _nodeID;
		
		private string _childID;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnnodeIDChanging(string value);
    partial void OnnodeIDChanged();
    partial void OnchildIDChanging(string value);
    partial void OnchildIDChanged();
    #endregion
		
		public SFTANodeRelation()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nodeID", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string nodeID
		{
			get
			{
				return this._nodeID;
			}
			set
			{
				if ((this._nodeID != value))
				{
					this.OnnodeIDChanging(value);
					this.SendPropertyChanging();
					this._nodeID = value;
					this.SendPropertyChanged("nodeID");
					this.OnnodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_childID", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string childID
		{
			get
			{
				return this._childID;
			}
			set
			{
				if ((this._childID != value))
				{
					this.OnchildIDChanging(value);
					this.SendPropertyChanging();
					this._childID = value;
					this.SendPropertyChanged("childID");
					this.OnchildIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SFTATreeInfo")]
	public partial class SFTATreeInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _nodeID;
		
		private string _nodedataID;
		
		private string _nodename;
		
		private string _description;
		
		private string _NodeType;
		
		private string _parentID;
		
		private string _siblingID;
		
		private string _FMEAInfo;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnnodeIDChanging(string value);
    partial void OnnodeIDChanged();
    partial void OnnodedataIDChanging(string value);
    partial void OnnodedataIDChanged();
    partial void OnnodenameChanging(string value);
    partial void OnnodenameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnNodeTypeChanging(string value);
    partial void OnNodeTypeChanged();
    partial void OnparentIDChanging(string value);
    partial void OnparentIDChanged();
    partial void OnsiblingIDChanging(string value);
    partial void OnsiblingIDChanged();
    partial void OnFMEAInfoChanging(string value);
    partial void OnFMEAInfoChanged();
    #endregion
		
		public SFTATreeInfo()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nodeID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string nodeID
		{
			get
			{
				return this._nodeID;
			}
			set
			{
				if ((this._nodeID != value))
				{
					this.OnnodeIDChanging(value);
					this.SendPropertyChanging();
					this._nodeID = value;
					this.SendPropertyChanged("nodeID");
					this.OnnodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nodedataID", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string nodedataID
		{
			get
			{
				return this._nodedataID;
			}
			set
			{
				if ((this._nodedataID != value))
				{
					this.OnnodedataIDChanging(value);
					this.SendPropertyChanging();
					this._nodedataID = value;
					this.SendPropertyChanged("nodedataID");
					this.OnnodedataIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nodename", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string nodename
		{
			get
			{
				return this._nodename;
			}
			set
			{
				if ((this._nodename != value))
				{
					this.OnnodenameChanging(value);
					this.SendPropertyChanging();
					this._nodename = value;
					this.SendPropertyChanged("nodename");
					this.OnnodenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeType", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string NodeType
		{
			get
			{
				return this._NodeType;
			}
			set
			{
				if ((this._NodeType != value))
				{
					this.OnNodeTypeChanging(value);
					this.SendPropertyChanging();
					this._NodeType = value;
					this.SendPropertyChanged("NodeType");
					this.OnNodeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentID", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string parentID
		{
			get
			{
				return this._parentID;
			}
			set
			{
				if ((this._parentID != value))
				{
					this.OnparentIDChanging(value);
					this.SendPropertyChanging();
					this._parentID = value;
					this.SendPropertyChanged("parentID");
					this.OnparentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_siblingID", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string siblingID
		{
			get
			{
				return this._siblingID;
			}
			set
			{
				if ((this._siblingID != value))
				{
					this.OnsiblingIDChanging(value);
					this.SendPropertyChanging();
					this._siblingID = value;
					this.SendPropertyChanged("siblingID");
					this.OnsiblingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FMEAInfo", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FMEAInfo
		{
			get
			{
				return this._FMEAInfo;
			}
			set
			{
				if ((this._FMEAInfo != value))
				{
					this.OnFMEAInfoChanging(value);
					this.SendPropertyChanging();
					this._FMEAInfo = value;
					this.SendPropertyChanged("FMEAInfo");
					this.OnFMEAInfoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
